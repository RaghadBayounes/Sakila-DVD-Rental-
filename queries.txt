/* Question#1: Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out. */


SELECT 
  film_title, 
  category_name, 
  rental_count 
FROM 
  (
    SELECT 
      DISTINCT f.title AS film_title, 
      cat.name AS category_name, 
      COUNT(ren.rental_id) OVER(PARTITION BY f.title) AS rental_count 
    FROM 
      film_category fcat 
      JOIN film f ON (fcat.film_id = f.film_id) 
      JOIN category cat ON (
        fcat.category_id = cat.category_id
      ) 
      JOIN inventory inv ON (inv.film_id = f.film_id) 
      JOIN rental ren ON (
        inv.inventory_id = ren.inventory_id
      ) 
    WHERE 
      (cat.name = 'Animation') 
      OR (cat.name = 'Children') 
      OR (cat.name = 'Classics') 
      OR (cat.name = 'Comedy') 
      OR (cat.name = 'Family') 
      OR (cat.name = 'Music')
  ) subq_t 
ORDER BY 
  2, 
  1;


 ----------------------------------------------------------------------------------------------------------------------------------------------

/* Question#2: Write a query that returns the store ID for the store, the year and month and the number of rental orders each store has fulfilled for that month. Your table should include a column for each of the following: year, month, store ID and count of rental orders fulfilled during that month. */

 
 SELECT 
  DATE_PART('month', ren.rental_date) AS rental_month, 
  DATE_PART('year', ren.rental_date) AS rental_year, 
  st.store_id AS store_id, 
  COUNT(ren.rental_id) AS count_rentals 
FROM 
  store st 
  JOIN staff stf ON st.store_id = stf.store_id 
  JOIN rental ren ON stf.store_id = ren.staff_id 
GROUP BY 
  1, 
  2, 
  3 
ORDER BY 
  4 DESC;


 ----------------------------------------------------------------------------------------------------------------------------------------------

/* Question#3:  Write a query that returns the customers fullname only if their amount is above 7.99 and the highest amount should come first, and their rental count must be between 35 and 40 only.  Your table should include a three columns: customer fullname , the rental count and the amount payment of each customer. */


SELECT 
  customer_fullname, 
  count_rentals, 
  amount, 
  rental_month 
FROM 
  (
    SELECT 
      CONCAT(c.first_name, ' ', c.last_name) as customer_fullname, 
      COUNT(ren.rental_id) AS count_rentals, 
      p.amount as amount, 
      DATE_PART('month', ren.rental_date) AS rental_month 
    FROM 
      customer c 
      JOIN rental ren ON ren.customer_id = c.customer_id 
      JOIN payment p ON p.customer_id = c.customer_id 
      JOIN staff stf ON stf.staff_id = ren.staff_id 
    GROUP BY 
      1, 
      3, 
      4 
    HAVING 
      p.amount > 7.99 
      AND COUNT(ren.rental_id) > 35 
      AND COUNT(ren.rental_id) < 40
  ) subq_t 
ORDER BY 
  3 DESC;


 ----------------------------------------------------------------------------------------------------------------------------------------------

/* Question#4: Write a query that returns the rating column replaced by categories based on the ages which are 'all ages' , '8 years and above' ,'13 years and above' and '17 years and above', the highest rental count comes first, and the length of the film should be 90 minutes or more. Your table should have four columns: film_title, film_length, rental_count,rating_categories. */

SELECT 
  f.title AS film_title, 
  f.length AS film_length, 
  COUNT(ren.rental_id) AS rental_count, 
  CASE WHEN f.rating = 'G' THEN 'All ages' WHEN f.rating = 'PG' THEN '8 years and above' WHEN f.rating = 'PG-13' THEN '13 years and above' WHEN f.rating = 'NC-17' 
  OR f.rating = 'R' THEN '17 years and above' END AS rating_catogries 
FROM 
  film f 
  JOIN inventory inv ON inv.film_id = f.film_id 
  JOIN rental ren ON ren.inventory_id = inv.inventory_id 
GROUP BY 
  f.title, 
  f.length, 
  f.rating 
HAVING 
  f.length <= 90 
ORDER BY 
  3 DESC;

